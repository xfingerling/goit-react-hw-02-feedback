{"version":3,"sources":["components/FeedbackNotification/FeedbackNotification.jsx","components/FeedbackSection/FeedbackSection.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/FeedbackStatistics/FeedbackStatistics.jsx","components/Feedback/Feedback.jsx","helpers/helpers.js","index.jsx"],"names":["FeedbackNotification","message","FeedbackSection","title","children","FeedbackOptions","onLeaveFeedback","name","type","onClick","FeedbackStatistics","good","neutral","bad","total","positivePercentage","defaultProps","Feedback","state","handleClick","e","targetBtnName","target","setState","this","totalFeedback","countTotalFeedback","positiveFeedbackPercentage","percent","Math","floor","countPositiveFeedbackPercentage","Component","App","render","document","getElementById"],"mappings":"kNASeA,EANc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,2BAAIA,ICYnCC,EAZS,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACtB,oCACE,4BAAKD,GACL,6BAAMC,KCqBKC,EAxBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,6BACE,4BAAQC,KAAK,OAAOC,KAAK,SAASC,QAASH,GAA3C,QAGA,4BAAQC,KAAK,UAAUC,KAAK,SAASC,QAASH,GAA9C,WAGA,4BAAQC,KAAK,MAAMC,KAAK,SAASC,QAASH,GAA1C,SCREI,EAAqB,SAAC,GAAD,IACzBC,EADyB,EACzBA,KACAC,EAFyB,EAEzBA,QACAC,EAHyB,EAGzBA,IACAC,EAJyB,EAIzBA,MACAC,EALyB,EAKzBA,mBALyB,OAOzB,6BACE,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,OAIJL,EAAmBM,aAAe,GAUnBN,QCjBMO,E,4MACnBC,MAAQ,CAAEP,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EAEpCM,YAAc,SAACC,GACb,IAAMC,EAAgBD,EAAEE,OAAOf,KAE/B,EAAKgB,UAAS,SAACL,GAAD,sBAAeG,EAAgBH,EAAMG,GAAiB,O,uDAG5D,IAAD,EACwBG,KAAKN,MAA5BP,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBY,ECvBiB,SAACd,EAAMC,EAASC,GAAhB,OAAwBF,EAAOC,EAAUC,EDuB1Ca,CAAmBf,EAAMC,EAASC,GAClDc,ECtB8B,SAAChB,EAAMc,GAC7C,IAAMG,EAAUC,KAAKC,MAAO,IAAMnB,EAAQc,GAE1C,OAAOG,GAAoB,EDmBUG,CACjCpB,EACAc,GAGF,OACE,6BACE,kBAAC,EAAD,CAAiBtB,MAAO,yBACtB,kBAAC,EAAD,CAAiBG,gBAAiBkB,KAAKL,eAGzC,kBAAC,EAAD,CAAiBhB,MAAO,cACpBsB,EAGA,kBAAC,EAAD,CACEd,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOW,EACPV,mBAAoBY,IAPtB,kBAAC,EAAD,CAAsB1B,QAAS,4B,GAzBL+B,aEPhCC,EAAM,kBAAM,kBAAC,EAAD,OAElBC,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.4a636247.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackNotification = ({ message }) => <p>{message}</p>;\r\n\r\nFeedbackNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default FeedbackNotification;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackSection = ({ title, children }) => (\r\n  <>\r\n    <h2>{title}</h2>\r\n    <div>{children}</div>\r\n  </>\r\n);\r\n\r\nFeedbackSection.propTypes = {\r\n  children: PropTypes.element,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default FeedbackSection;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => (\r\n  <div>\r\n    <button name=\"good\" type=\"button\" onClick={onLeaveFeedback}>\r\n      Good\r\n    </button>\r\n    <button name=\"neutral\" type=\"button\" onClick={onLeaveFeedback}>\r\n      Neutral\r\n    </button>\r\n    <button name=\"bad\" type=\"button\" onClick={onLeaveFeedback}>\r\n      Bad\r\n    </button>\r\n  </div>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      text: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackStatistics = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) => (\r\n  <div>\r\n    <p>Good: {good}</p>\r\n    <p>Neutral: {neutral}</p>\r\n    <p>Bad: {bad}</p>\r\n    <p>Total: {total}</p>\r\n    <p>Positive feedback: {positivePercentage}%</p>\r\n  </div>\r\n);\r\n\r\nFeedbackStatistics.defaultProps = {};\r\n\r\nFeedbackStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n\r\nexport default FeedbackStatistics;\r\n","import React, { Component } from \"react\";\r\n\r\nimport {\r\n  countTotalFeedback,\r\n  countPositiveFeedbackPercentage,\r\n} from \"../../helpers/helpers\";\r\n\r\nimport FeedbackNotification from \"../FeedbackNotification/FeedbackNotification\";\r\nimport FeedbackSection from \"../FeedbackSection/FeedbackSection\";\r\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\r\nimport FeedbackStatistics from \"../FeedbackStatistics/FeedbackStatistics\";\r\n\r\nexport default class Feedback extends Component {\r\n  state = { good: 0, neutral: 0, bad: 0 };\r\n\r\n  handleClick = (e) => {\r\n    const targetBtnName = e.target.name;\r\n\r\n    this.setState((state) => ({ [targetBtnName]: state[targetBtnName] + 1 }));\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const totalFeedback = countTotalFeedback(good, neutral, bad);\r\n    const positiveFeedbackPercentage = countPositiveFeedbackPercentage(\r\n      good,\r\n      totalFeedback,\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <FeedbackSection title={\"Please leave feedback\"}>\r\n          <FeedbackOptions onLeaveFeedback={this.handleClick} />\r\n        </FeedbackSection>\r\n\r\n        <FeedbackSection title={\"Statistics\"}>\r\n          {!totalFeedback ? (\r\n            <FeedbackNotification message={\"No feedback given\"} />\r\n          ) : (\r\n            <FeedbackStatistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={totalFeedback}\r\n              positivePercentage={positiveFeedbackPercentage}\r\n            />\r\n          )}\r\n        </FeedbackSection>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const countTotalFeedback = (good, neutral, bad) => good + neutral + bad;\r\n\r\nconst countPositiveFeedbackPercentage = (good, totalFeedback) => {\r\n  const percent = Math.floor((100 * good) / totalFeedback);\r\n\r\n  return percent ? percent : 0;\r\n};\r\n\r\nexport { countTotalFeedback, countPositiveFeedbackPercentage };\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nimport Feedback from \"./components/Feedback/Feedback\";\r\n\r\nconst App = () => <Feedback />;\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}